$date
	Sun Oct 12 17:30:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xor_xnor_tb $end
$var wire 1 ! y_xor_nor $end
$var wire 1 " y_xor_nand $end
$var wire 1 # y_xor_g $end
$var wire 1 $ y_xor_d $end
$var wire 1 % y_xor_b $end
$var wire 1 & y_xor4 $end
$var wire 1 ' y_xnor_nor $end
$var wire 1 ( y_xnor_nand $end
$var wire 1 ) y_xnor_g $end
$var wire 1 * y_xnor_d $end
$var wire 1 + y_xnor_b $end
$var wire 1 , y_xnor4 $end
$var reg 1 - a $end
$var reg 1 . b $end
$var reg 4 / v [3:0] $end
$var integer 32 0 errors [31:0] $end
$var integer 32 1 i [31:0] $end
$var integer 32 2 ones [31:0] $end
$scope module u_xnor4 $end
$var wire 4 3 a [3:0] $end
$var wire 1 , y $end
$var parameter 32 4 N $end
$upscope $end
$scope module u_xnor_b $end
$var wire 1 - a $end
$var wire 1 . b $end
$var reg 1 + y $end
$upscope $end
$scope module u_xnor_d $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 * y $end
$upscope $end
$scope module u_xnor_g $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 ) y $end
$upscope $end
$scope module u_xnor_nand $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 5 p $end
$var wire 1 6 q $end
$var wire 1 7 r $end
$var wire 1 8 xor_y $end
$var wire 1 ( y $end
$upscope $end
$scope module u_xnor_nor $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 9 na $end
$var wire 1 : nb $end
$var wire 1 ; t1 $end
$var wire 1 < t2 $end
$var wire 1 ' y $end
$var wire 1 = y_n $end
$upscope $end
$scope module u_xor4 $end
$var wire 4 > a [3:0] $end
$var wire 1 & y $end
$var parameter 32 ? N $end
$upscope $end
$scope module u_xor_b $end
$var wire 1 - a $end
$var wire 1 . b $end
$var reg 1 % y $end
$upscope $end
$scope module u_xor_d $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 $ y $end
$upscope $end
$scope module u_xor_g $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 # y $end
$upscope $end
$scope module u_xor_nand $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 @ p $end
$var wire 1 A q $end
$var wire 1 B r $end
$var wire 1 " y $end
$upscope $end
$scope module u_xor_nor $end
$var wire 1 - a $end
$var wire 1 . b $end
$var wire 1 C na $end
$var wire 1 D nb $end
$var wire 1 E t1 $end
$var wire 1 F t2 $end
$var wire 1 ! y $end
$var wire 1 G y_n $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 ?
b100 4
$end
#0
$dumpvars
1G
0F
0E
1D
1C
1B
1A
1@
bx >
0=
0<
1;
1:
19
08
17
16
15
bx 3
bx 2
b0 1
b0 0
bx /
0.
0-
x,
1+
1*
1)
1(
1'
x&
0%
0$
0#
0"
0!
$end
#1000
1!
0(
0'
0G
0*
18
1=
1"
1E
1%
0+
0)
07
0:
0;
1$
1#
0B
0D
1.
b1 1
#2000
1!
1F
0G
06
09
0A
0C
0E
17
1:
1B
1D
1-
0.
b10 1
#3000
1(
1'
08
0=
0"
0!
1*
16
1<
1A
1G
0%
1+
1)
05
17
0:
0$
0#
0@
1B
0D
0F
1.
b11 1
#4000
0!
0<
1G
1:
1D
15
19
1;
1@
1C
0E
0.
0-
b100 1
#5000
1!
0(
0'
0G
0*
18
1=
1"
1F
1%
0+
0)
06
09
0;
1$
1#
0A
0C
1-
#6000
1!
1E
0G
07
0:
0B
0D
0F
16
19
1A
1C
1.
0-
#7000
1(
1'
08
0=
0"
0!
1*
17
1<
1B
1G
0%
1+
1)
05
16
09
0$
0#
0@
1A
0C
0E
1-
#8000
1,
0&
b0 /
b0 3
b0 >
b0 1
#9000
0,
1&
b1 /
b1 3
b1 >
b1 1
b0 2
#10000
b10 /
b10 3
b10 >
b10 1
b1 2
#11000
1,
0&
b11 /
b11 3
b11 >
b11 1
#12000
0,
1&
b100 /
b100 3
b100 >
b100 1
b10 2
#13000
1,
0&
b101 /
b101 3
b101 >
b101 1
b1 2
#14000
b110 /
b110 3
b110 >
b110 1
b10 2
#15000
0,
1&
b111 /
b111 3
b111 >
b111 1
#16000
b1000 /
b1000 3
b1000 >
b1000 1
b11 2
#17000
1,
0&
b1001 /
b1001 3
b1001 >
b1001 1
b1 2
#18000
b1010 /
b1010 3
b1010 >
b1010 1
b10 2
#19000
0,
1&
b1011 /
b1011 3
b1011 >
b1011 1
#20000
1,
0&
b1100 /
b1100 3
b1100 >
b1100 1
b11 2
#21000
0,
1&
b1101 /
b1101 3
b1101 >
b1101 1
b10 2
#22000
b1110 /
b1110 3
b1110 >
b1110 1
b11 2
#23000
1,
0&
b1111 /
b1111 3
b1111 >
b1111 1
#24000
b10000 1
b100 2
